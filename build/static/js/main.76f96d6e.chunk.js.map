{"version":3,"sources":["repo-fetch.js","dlsite-fetch.js","App.js","serviceWorker.js","index.js"],"names":["link","a","async","destination","url","parse","request","get","then","response","querySelector","querySelectorAll","filter","e","text","toUpperCase","includes","map","tr","game","tds","code","split","replace","name","protocol","host","attributes","href","size","length","catch","console","log","links","codes","i","roundedId","GetRoundedId","substring","push","download","linkJp","linkEn","imagePath","idNumber","parseInt","num","str","toString","LeadingZeroes","Math","ceil","Cards","props","elements","items","item","Card","src","image","unloader","brokenImage","className","Content","Header","header","Meta","meta","extra","Button","Group","fluid","onClick","window","open","rjSite","content","reSite","primary","centered","App","state","value","onChange","bind","onDisplay","this","setState","target","api","dlsite","parseCodeToImageMeta","Container","as","icon","inverted","textAlign","Icon","Subheader","Divider","Input","action","color","labelPosition","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76f96d6e.chunk.js","sourcesContent":["import request from 'request-promise';\r\nimport url from 'url';\r\nimport { parse } from 'node-html-parser';\r\n\r\nexport default {\r\n  getLinks: async function (link) {\r\n    const destination = url.parse(link);\r\n    return request.get(link)\r\n      .then((response) => {\r\n        const root = parse(response).querySelector('table');\r\n        const parent = root.querySelectorAll('tr').filter(e => e.text.toUpperCase().includes('RJ') || e.text.toUpperCase().includes('RE'));\r\n        return parent.map(tr => {\r\n          let game = tr.querySelector('a');\r\n          let tds = tr.querySelectorAll('td');\r\n          return {\r\n            code: game.text.split(' ')[0].replace('RE', 'RJ'),\r\n            name: game.text,\r\n            link: destination.protocol + \"//\" + destination.host + game.attributes.href,\r\n            size: tds[tds.length - 1].text\r\n          }\r\n        })\r\n      })\r\n      .catch(e => {\r\n        console.log(e)\r\n      })\r\n  }\r\n}","export default {\r\n  parseCode(links) {\r\n    const codes = [];\r\n    for (let i = 0; i < links.length; ++i) {\r\n      let roundedId = GetRoundedId(links[i].code.substring(2, links[i].code.length));\r\n      codes.push({\r\n        name: links[i].name,\r\n        download: links[i].link,\r\n        size: links[i].size,\r\n        linkJp: \"http://www.dlsite.com/maniax/work/=/product_id/\" + links[i].code + \".html\",\r\n        linkEn: \"http://www.dlsite.com/ecchi-eng/work/=/product_id/\" + links[i].code.replace(\"RJ\", \"RE\") + \".html\",\r\n        imagePath: [\r\n          \"http://img.dlsite.jp/modpub/images2/work/doujin/RJ\" + roundedId + \"/\" + links[i].code + \"_img_main.jpg\",\r\n          \"http://img.dlsite.jp/modpub/images2/work/doujin/RE\" + roundedId + \"/\" + links[i].code.replace(\"RJ\", \"RE\") + \"_img_main.jpg\"\r\n        ]\r\n      })\r\n    }\r\n\r\n    return codes;\r\n  }\r\n}\r\n\r\nconst codeDigitCount = 6;\r\n\r\nfunction GetRoundedId(idNumber)\r\n{\r\n\tidNumber = parseInt(idNumber);\r\n\tidNumber = Math.ceil(idNumber / 1000) * 1000;\r\n\tidNumber = LeadingZeroes(idNumber, codeDigitCount);\r\n\treturn idNumber;\r\n}\r\n\r\nfunction LeadingZeroes(num, size)\r\n{\r\n    var str = num.toString();\r\n    while (str.length < size) {\r\n      str = \"0\" + str;\r\n    }\r\n    return str;\r\n}","import React from 'react';\r\nimport { Header, Container, Icon, Divider, Input, Card, Button } from 'semantic-ui-react';\r\nimport Img from 'react-image'\r\nimport './App.css';\r\nimport api from './repo-fetch';\r\nimport dlsite from './dlsite-fetch';\r\n\r\nfunction Cards (props) {\r\n  const elements = props.items.map(item => {\r\n    return (<Card>\r\n      <Img src={item.image} unloader={item.brokenImage} className=\"ui image\"/>\r\n      <Card.Content>\r\n        <Card.Header>{item.header}</Card.Header>\r\n        <Card.Meta>\r\n          {item.meta}\r\n        </Card.Meta>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group fluid>\r\n          <Button onClick={() => { window.open(item.rjSite)}} content='RJ' />\r\n          <Button onClick={() => { window.open(item.reSite)}} content='RE' />\r\n          <Button content='Download' onClick={() => { window.open(item.download)}} primary/>\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>)\r\n  })\r\n  return (<Card.Group centered className=\"display\">\r\n    {elements}\r\n    </Card.Group>)\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: 'https://cloudflare-ipfs.com/ipfs/QmfXScx6H6M4TW1SqZ14qcZR3Gay6wfck8dHCs3Bio2CzU',\r\n      items: []\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onDisplay = this.onDisplay.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n\r\n  async onDisplay(e) {\r\n    const links = await api.getLinks(this.state.value);\r\n    const codes = await dlsite.parseCode(links);\r\n    this.setState({\r\n      items: this.parseCodeToImageMeta(codes)\r\n    })\r\n  }\r\n\r\n  parseCodeToImageMeta(codes) {\r\n    return codes.map(code => {\r\n      return {\r\n        header: code.name,\r\n        meta: code.size,\r\n        image: code.imagePath,\r\n        brokenImage: 'https://react.semantic-ui.com/images/wireframe/image.png',\r\n        rjSite: code.linkJp,\r\n        reSite: code.linkEn,\r\n        download: code.download\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Container>\r\n          <Header as='h2' icon inverted textAlign='center'>\r\n            <Icon name='grid layout' />\r\n            /hgg2d/ ipfs previewer\r\n          <Header.Subheader>\r\n              Copy paste ipfs repo link below, kudos to DL Site Previewer for parsing code.\r\n          </Header.Subheader>\r\n          </Header>\r\n          <Divider />\r\n          <Input\r\n            fluid\r\n            action={{\r\n              color: 'teal',\r\n              labelPosition: 'right',\r\n              icon: 'search',\r\n              content: 'Display',\r\n              onClick: this.onDisplay\r\n            }}\r\n            value={this.state.value}\r\n            onChange={this.onChange}\r\n          />\r\n        </Container>\r\n        <Cards items={this.state.items}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}